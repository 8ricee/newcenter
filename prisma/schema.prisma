// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum CourseStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  student          Student?
  teacher          Teacher?
  admin            Admin?
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id          String    @id @default(cuid())
  userId      String    @unique
  phoneNumber String?
  dateOfBirth DateTime?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments  Enrollment[]
  attendances  Attendance[]
  certificates Certificate[]
}

model Teacher {
  id          String   @id @default(cuid())
  userId      String   @unique
  phoneNumber String?
  bio         String?  @db.Text
  specialties String[]
  education   String?
  experience  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses Course[]
  classes Class[]
}

model Admin {
  id         String   @id @default(cuid())
  userId     String   @unique
  department String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  level       String
  duration    Int
  lessons     Int
  price       Decimal      @db.Decimal(10, 2)
  status      CourseStatus @default(UPCOMING)
  image       String?
  teacherId   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  teacher      Teacher?      @relation(fields: [teacherId], references: [id], onDelete: SetNull)
  classes      Class[]
  enrollments  Enrollment[]
  certificates Certificate[]
}

model Class {
  id          String   @id @default(cuid())
  name        String
  courseId    String
  teacherId   String
  startDate   DateTime
  endDate     DateTime
  schedule    Json
  room        String?
  maxStudents Int      @default(20)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher     Teacher        @relation(fields: [teacherId], references: [id], onDelete: Restrict)
  enrollments Enrollment[]
  sessions    ClassSession[]
}

model ClassSession {
  id          String   @id @default(cuid())
  classId     String
  date        DateTime
  startTime   String
  endTime     String
  topic       String?
  description String?  @db.Text
  materials   String?  @db.Text
  room        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  attendances Attendance[]
}

model Enrollment {
  id         String           @id @default(cuid())
  studentId  String
  courseId   String
  classId    String?
  enrolledAt DateTime         @default(now())
  status     EnrollmentStatus @default(PENDING)
  progress   Int              @default(0)
  notes      String?          @db.Text
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  class   Class?  @relation(fields: [classId], references: [id], onDelete: SetNull)
}

model Attendance {
  id        String           @id @default(cuid())
  sessionId String
  studentId String
  status    AttendanceStatus @default(PRESENT)
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  session ClassSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Certificate {
  id                String   @id @default(cuid())
  studentId         String
  courseId          String
  issueDate         DateTime @default(now())
  certificateNumber String   @unique
  grade             String?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(cuid())
  content    String   @db.Text
  senderId   String
  receiverId String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}
