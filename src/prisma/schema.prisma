generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  student          Student?
  teacher          Teacher?
  admin            Admin?
  accounts         Account[]
  sessions         Session[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model Student {
  id        String    @id @default(cuid())
  userId    String    @unique
  phone     String?
  address   String?
  birthDate DateTime?
  bio       String?   @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
}

model Teacher {
  id             String   @id @default(cuid())
  userId         String   @unique
  position       String?
  bio            String?  @db.Text
  education      String?
  experience     String?
  specialization String?
  achievements   String[] @default([])
  languages      String[] @default([])
  socialMedia    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses   Course[]
  schedules Schedule[]
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id               String   @id @default(cuid())
  title            String
  slug             String   @unique
  description      String
  fullDescription  String?  @db.Text
  image            String?
  level            String
  language         String
  duration         String
  lessons          Int
  hoursPerLesson   Float
  schedule         String?
  groupSize        String?
  format           String
  price            Float
  promotionPrice   Float?
  hasPromotion     Boolean  @default(false)
  promotionPercent Int?
  isPopular        Boolean  @default(false)
  isNew            Boolean  @default(false)
  features         String[] @default([])
  requirements     String[] @default([])
  outcomes         String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  teacher      Teacher       @relation(fields: [teacherId], references: [id])
  teacherId    String
  curriculum   Curriculum[]
  faq          FAQ[]
  testimonials Testimonial[]
  schedules    Schedule[]
  enrollments  Enrollment[]
}

model Curriculum {
  id        String   @id @default(cuid())
  title     String
  courseId  String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
}

model Lesson {
  id           String   @id @default(cuid())
  title        String
  duration     String
  description  String?
  curriculumId String
  order        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Schedule {
  id              String   @id @default(cuid())
  courseId        String
  teacherId       String
  startDate       DateTime
  endDate         DateTime
  daysOfWeek      String[] // e.g. ["Monday", "Wednesday"]
  startTime       String // e.g. "18:00"
  endTime         String // e.g. "19:30"
  location        String?
  room            String?
  maxStudents     Int
  currentStudents Int      @default(0)
  status          String   @default("Còn chỗ") // "Còn chỗ", "Sắp đầy", "Hết chỗ"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]
}

model Enrollment {
  id            String   @id @default(cuid())
  studentId     String
  courseId      String
  scheduleId    String
  status        String   @default("Đang học") // "Đang học", "Hoàn thành", "Đã hủy"
  paymentStatus String   @default("Chưa thanh toán") // "Chưa thanh toán", "Đã thanh toán"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  student  Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  avatar    String?
  courseId  String
  rating    Int
  comment   String   @db.Text
  date      DateTime @default(now())
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String
  content   String   @db.Text
  image     String?
  category  String
  tags      String[] @default([])
  authorId  String
  readTime  String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         String   @id @default(cuid())
  content    String   @db.Text
  senderId   String
  receiverId String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}
